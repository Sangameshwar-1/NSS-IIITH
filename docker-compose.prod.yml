version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: nss-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: nss_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network

  # Backend API Service (Multiple instances for load balancing)
  backend-1:
    build:
      context: ./backend/members
      dockerfile: Dockerfile
    container_name: nss-backend-1
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/nss_db?authSource=admin
      - API_ENV=${API_ENV:-development}
      - API_PORT=8000
    depends_on:
      - mongodb
    volumes:
      - ./backend/members:/app
    networks:
      - app-network

#  backend-2:
#    build:
#      context: ./backend/members
#      dockerfile: Dockerfile
#    container_name: nss-backend-2
#    restart: unless-stopped
#    environment:
#      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/nss_db?authSource=admin
#      - API_ENV=production
#      - API_PORT=8000
#    depends_on:
#      - mongodb
#    volumes:
#      - ./backend/members:/app
#    networks:
#      - app-network

  # Frontend Service (Multiple instances for load balancing)
  frontend-1:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nss-frontend-1
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://nginx/api
    depends_on:
      - backend-1
      - backend-2
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network
#
#  frontend-2:
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    container_name: nss-frontend-2
#    restart: unless-stopped
#    environment:
#      - NODE_ENV=production
#      - NEXT_PUBLIC_API_URL=http://nginx/api
#    depends_on:
#      - backend-1
#      - backend-2
#    volumes:
#      - ./frontend:/app
#      - /app/node_modules
#      - /app/.next
#    networks:
#      - app-network

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nss-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend-1
      - frontend-2
      - backend-1
      - backend-2
    networks:
      - app-network

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: nss-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nss-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - app-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: nss-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
